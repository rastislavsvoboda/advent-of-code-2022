#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!csharp

var rucksacks = System.IO.File.ReadAllLines("3.in");

#!csharp

string[] SplitCompartments(string rucksack)
{
    var half = rucksack.Length / 2;
    var c1 = rucksack.Substring(0, half);
    var c2 = rucksack.Substring(half);
    return new string[] { c1, c2 };
}


char Intersect(string[] strings)
{
    var res = new HashSet<char>(strings[0]);
    foreach (var str in strings.Skip(1))
    {
        res.IntersectWith(str);
    }
    return res.FirstOrDefault();
}


int Priority(char ch)
{
    if ('a' <= ch && ch <= 'z')
    {
        return ((int)(ch) - (int)('a')) + 1;
    }
    if ('A' <= ch && ch <= 'Z')
    {
        return ((int)(ch) - (int)('A')) + 27;
    }
    throw new ArgumentOutOfRangeException("ch should be uppercase or lowercase letter");
}

var totalPrioritiesP1 = rucksacks
    .Select(SplitCompartments)
    .Select(strings => Priority(Intersect(strings)))
    .Sum();

#!csharp

var totalPrioritiesP2 = rucksacks
    .Chunk(3)
    .Select(strings => Priority(Intersect(strings)))
    .Sum();

#!csharp

Console.WriteLine("Part1 {0}", totalPrioritiesP1);
Console.WriteLine("Part2 {0}", totalPrioritiesP2);
